

Термины:
СК - страховая компания, партнер
БД - база данных
DDD - Domain Driven Development

Реализовать рабочий прототип API-сервиса покупки страховок. Использовать git, коммитить по ходу выполнения.
Можно без выгрузки на github, а предоставить проект с папкой .git

Использовать: Symfony, Doctrine, MySQL. Было бы хорошо, если бы проект был на docker, это по желанию.
По желанию можно сделать в стиле DDD, не обязательно.
API предоставить в виде коллекций Postman. Если нет опыта с Postman - можно в другом удобном виде.

Сервис состоит из 4х частей.
Части 2 и 3 условно внешние, но реализовать надо в одном проекте.
1. API для клиентов
2. API внешней СК (страховой компании)
3. API внешней платежной системы (LiqPay)
4. Админка: страница с инфо по проданным полисам (id, цена, название тарифа, дата/время, статус),
		    редактирование тарифов: CRUD () - этот пункт не обязательно, можно без админки, а вручную заполнить их в БД
  Авторизацию не надо, просто /admin/stats

1. API для клиентов
  GET  /api/offers
  POST /api/buy
  GET  /api/policy   (все полисы клиента, можно без авторизации, а на основе текущей сессии)
  GET  /api/policy/{id}
  --------
  POST /api/payment/receive - API для обратного вызова с LiqPay. LiqPay шлет нам запрос - оплата за заказ X на сумму Y прошла успешно.
  {status: success, order_id: {id}, amount: {сумма_оплаты}, payment_id: int_random}

2. API СК - сделать в отдельном контроллере, условно это будет внешнее API нашего партнера - страховой компании
  POST /sk/api/contract/create
  GET  /sk/apk/download/{sk_id}

3. API платежной системы - сделать в отдельном контроллере, условно это будет API LiqPay
  POST /pay/api/form
  Генерим уникальный payment_id
  И можно сразу оттуда делать вызов /api/payment/receive

Процесс:
  1. От клиента приходит запрос тарифов /api/offers?option=15   (15, 30 или 365)
  На каждый вариант option возвращаются по 2 тарифа (всего тарифов 6), чем больше значение option, тем дороже цена.
  Цена считается так, 100 умножить на коэффициента тарифа. 
  Например, у 
  15-Стандарт коэффициент - 0.2, у 15-Премиум - 0.314
  30-стандарт 			      - 0.4,   30-премиум - 0.6
  365-стандарт            - 11.2, 365-премиум - 18
  Ответ:
  [
  	{tariff_id:?, tariff_title:Стандарт, tariff_cost:? },
  	{tariff_id:?, tariff_title:Премиум,  tariff_cost:? }
  ]

  2. Клиент шлет запрос на /api/buy {tariff_id, last_name, email}
  2.1 Создаем заявку, статус (draft) (id, tariff_id, last_name, email, amount, sk_id:null, id_payment:null)
  2.2 Шлем запрос в СК, {tariff_id:?, last_name:?, email:?} В ответ получаем {status: success, sk_id: int_random()}
  2.3 Записываем sk_id в заявку (id договора в СК (страховой компании))
  2.4 Шлем запрос в liqpay, на генерацию формы {client_email:?, order_id: (id-заявки), amount:?} в ответ получаем {status: success, amount:?}
  2.5 Возвращаем клиенту {order_id:?, amount:?}
  -- тут условно клиент производит оплату --

  3. На /api/payment/receive получаем ответ как бы от платежной системы {order_id:?, amount:?, payment_id: int_random}
  3.1 Если в БД есть такая заявка, совпадает цена, меняем её статус на paid
  3.2 Добавляем в очередь задачу на проверку pdf полиса (pdf генерится с задержкой) (/sk/api/download/{sk_id}) сервис очередей можно не подклчать, а сделать заглушку без реализаций
  с описанием словами, какие действия будут происходить далее, после добавления в условную очередь. Можно на псевдо-коде.

  3.3 Когда полис удалось скачать, отправляем его клиенту, заявке ставим статус ready
  Отправка условная, можно тоже на псевдокоде.

  В итоге должно получится:
	  1 Разворачиваем у себя проект
	  2 Заполняем тарифы (Если есть CRUD, если нету - накатываем дамп базы)
	  3 Шлем запрос на тарифы из POSTMAN
	  4 Шлем запрос на buy c id тарифа из прошлого запроса
	  5 Видим в админке заявку, а в ответе order_id, amount
	  6 Шлем "от лица" LiqPay запрос на /api/payment/receive
	  7 Заявка становится paid
	  8 Через 10 сек заявка становится ready
